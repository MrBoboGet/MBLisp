skip "\s+";
term T = "true";
term F = "false";
term lcurl = "\{";
term rcurl = "\}";
term lsquare = "\[";
term rsquare = "\]";
term for = "for";
term if = "if";
term in = "in";
term while = "while";
term else = "else";
term semi = ";";
term num = "\d+";
term str = "\"([^\"\\]|\\.)*\"";
term regex = "(s|d|e)?/(([^\n/\\]|\\.)*/)*\w*";
term idf = "\w+|\$_";
term dot = "\.";
term plus = "\+";
term times = "\*";
term comp = "=~";
term le = "<";
term leq = "<=";
term ge = ">";
term geq = ">=";
term eqq = "==";
term eq = "=";
term lpar = "\(";
term rpar = "\)";
term comma = ",";

struct Idf
{
    tokenPos Position;
    string Value;
}

struct Expr
{
    
}

struct Expr_Idf : Expr
{
    Idf Identifier;
}
struct Expr_Num : Expr
{
    int Value;
    tokenPos Position;
}
struct Expr_Bool : Expr
{
    bool Value;
}
 
struct Expr_FuncCall : Expr
{
    Idf Identifier;
    List<Expr> Arguments;
}


struct OperatorPart
{
    Op Operator;
    Expr Rhs;
}

struct Op
{ 
    string Value;
    bool Assignment = false;
    List<Expr> ExtraArgs;
}
struct Expr_Operators : Expr
{
    Expr Lhs;
    List<OperatorPart> Parts;
}

struct Statement {}

struct IfContent
{
    Idf IfPart;
    Expr Condition;
    bool HasCondition = true;
    List<Statement> Body;
}
struct Statement_If : Statement
{
    IfContent If;
    List<IfContent> ElseClauses;
}

struct Statement_While : Statement
{
    Idf WhilePart;
    Expr Condition;
    List<Statement> Body;
}
struct Statement_For : Statement
{
    Idf ForPart;
    Expr Enumerable;
    Idf VarName;
    List<Statement> Body;
}
struct Statement_Expr : Statement
{
    Expr Expr;
}

struct StatementList
{
    List<Statement> Statements;
}

struct Expr_Regex : Expr
{
    tokenPos Begin;
    string Content;
}
struct Expr_String : Expr
{
    tokenPos Begin;
    string Content;
}


Idf = Position=TOKEN.Position Value=idf;
Expr_Idf = Identifier=Idf;
Expr_Num =  Position=TOKEN.Position Value=num;
Expr_Bool =  (Value=true T | Value=false F);
Op = (Value = dot | Value=comp | Value=plus | Value=times | Value=eq | Value=eqq | Value=le | Value=leq
        | Value=ge | Value=geq) 
            (eq Assignment = true)?;
def PostOp = Op;
PostOp = Value=lsquare (ExtraArgs=Expr (comma ExtraArgs=Expr)*)?  rsquare;
Expr_FuncCall = Identifier=Idf lpar (Arguments=Expr (comma Arguments=Expr)*)?  rpar ;
Expr_Regex = Begin = TOKEN.Position Content = regex;
Expr_String = Begin = TOKEN.Position Content = str;

def Expr_Term = Expr;
Expr_Term = lpar this=Expr rpar | this=Expr_Idf | this = Expr_FuncCall | this=Expr_Num | 
    this=Expr_Bool | this=Expr_Regex | this=Expr_String;
Expr_Operators = Lhs=Expr_Term 
    Parts=OperatorPart(Operator=Op (Rhs=Expr_Term) | Operator=PostOp)*;
Expr = this=Expr_Operators;
Statement_For = ForPart.Position = TOKEN.Position ForPart.Value = for  (VarName=Idf in )? Enumerable=Expr lcurl Body=Statement* rcurl; 
IfContent = IfPart.Position = TOKEN.Position IfPart.Value = if Condition=Expr lcurl Body=Statement* rcurl;

Statement_If = If = IfContent (else ElseClauses=IfContent)* 
    (else ElseClauses=IfContent(lcurl HasCondition=false Body=Statement* rcurl ))?;
Statement_While = WhilePart.Position = TOKEN.Position WhilePart.Value = while 
        Condition=Expr lcurl Body=Statement*  rcurl;
Statement_Expr = Expr=Expr semi;
Statement = this=Statement_For | this = Statement_While | this=Statement_Expr | this=Statement_If;
StatementList = Statements=Statement*;
