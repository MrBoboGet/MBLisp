(set user-libs-path (plus (user-home-dir) "/.mblisp/libs"))
(set user-libs (list-dir user-libs-path))
(set builtin-modules (internal-modules))
(set loaded-modules (make-dict))


(defun module-specifier-to-string (module-symbol)
  (plus "/" (foldl (split (str module-symbol) ".") _(plus _ (plus "/"  _1))))
)


(set loaded-scopes (dict))

(defun get-scope (file-path)
    (set canonical-path (canonical file-path))
    (if (in canonical-path loaded-scopes)
        (. loaded-scopes canonical-path)
     else 
        (set new-scope (new-environment))
        (eval `(load ,file-path) new-scope)
        (set (index loaded-scopes canonical-path) new-scope)
        new-scope
    )
)

(defun set-get-scope-func (new-func)
    (set get-scope-func new-func)
)

(set get-scope-func get-scope)
(defmacro import (value &rest binding &envir envir)
  (set script-dir (plus (parent-path (. envir 'load-filepath)) "/"))
  (if (eq script-dir "/") (set script-dir ""))
  (set file-to-load "")
  (set is-internal false)
  (set internal-string "")
  (if (eq (type value) symbol_t)
    (set module-path (module-specifier-to-string value))
    (set alternatives (list module-path (plus module-path ".lisp")))
    (doit alternative alternatives
        (if (exists (plus user-libs-path alternative))
            (set file-to-load (plus user-libs-path alternative))
            (break)
         else if (exists (plus script-dir alternative))
            (set file-to-load (plus script-dir alternative))
            (break)
         else if (in (str value) builtin-modules)
            (set is-internal true)
            (set internal-string (str  value))
            (break)
        )
    )
    (if (&& (eq is-internal false) (eq file-to-load ""))
        (error (plus "Cannot find module in working directory or user libs: " (str value)))
    )
   else if (eq (type value) string_t)
      (set file-to-load (plus script-dir value))
      (if (in value builtin-modules)
         (set is-internal true)
         (set internal-string value)
      )
   else 
      (error "First argument to import has to be either a string or a symbol")
  )
  (if is-internal
    (if (< (len binding) 1)
        (return `(add-parent (environment) (get-internal-module ,internal-string)))
     else 
        (return `(set ,(. binding 0) (get-internal-module ,internal-string)))
    )
  )
  (if (is-directory file-to-load)
    (set file-to-load (plus file-to-load "/index.lisp"))
  )
  (if (not (in ".lisp" file-to-load))
     (set file-to-load (plus file-to-load ".lisp")) 
  )
  (if (not (is-file file-to-load))
    (error (plus "No file with name " file-to-load)  )
  )
  (set scope-to-eval '(environment))
  (if (eq (len binding) 0)
     `(add-parent (environment) ,(get-scope file-to-load))
   else
    (set scope-sym (index binding 0))
   `(set ,scope-sym ,(get-scope file-to-load))
  )
)
(load (plus (parent-path load-filepath) "/import-expander.lisp"))
