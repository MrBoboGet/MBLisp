(defclass symbol-location ()
    (symbols (list))
    (constructor (source dest) 
        (set (slot this symbols) (list source dest)) 
    )
)

(defclass extra-ast ()
    (ast null)
    (constructor (value)
        (set :ast this value)
    )
)

(defclass extra-diagnostic ()
    (ast null)
    (message null)
    (constructor (location message)
        (set :ast this location)
        (set :message this message)
    )
)

(defclass semantic-token ()
    (content null)
    (constructor (token token-type) 
        (set (slot this content) (list token token-type))
    )
)
(defclass jump-location ()
    (content null)
    (constructor (token token-type) 
        (set (slot res content) (list token token-type)) 
    )
)
(defun type-to-string (type-to-check)
    (set return-value "var")
    (if (eq type-to-check macro_t)
        (set return-value "macro")
     else if (eq type-to-check function_t)
        (set return-value "function")
     else if (eq type-to-check lambda_t)
        (set return-value "function")
     else if (eq type-to-check generic_t)
        (set return-value "function")
     else if (eq type-to-check type_t)
        (set return-value "class")
     else 
        (set return-value "var")
    )
    return-value
)
(set current-scope (new-environment))

(defun get-current-scope ()
    current-scope
)
(defun set-current-scope (new-scope)
    (set current-scope new-scope)
)
